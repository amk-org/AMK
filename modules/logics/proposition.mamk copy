# proposition.mamk
# This is a module for AMK, defining some necessary thing for propositional logics
# Drafted by ssy @ 23rd Oct 2015

TYPE
	statement {default}
	set[statement] # [statement] here means there is a list of several (finite) statements

OPERATOR # operators are arranged in decreasing order of their priorities
	nonasc not (statement) --> statement

	right wedge (statement, statement) --> statement # ^

	right vee (statement, statement) --> statement # v

	right -> (statement, statement) --> statement

	right <-> (statement, statement) --> statement

	right |- (set[statement], statement) --> statement
	
	right |-| (set[statement], statement) --> statement

AXIOM

	# base axioms of "N"

axiom belong:
	require:
		define a of statement
		define b of set[statement] 
	conclude:
		a, b |-a

axiom not_cancellation:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		not a, c |- b
		not a, c |- not b
	conclude:
		c |- a

axiom not_introduction:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		a, c |- b
		a, c |- not b
	conclude:
		c |- not a

axiom contain_cancellation:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a -> b
		c |- a
	conclude:
		c |- b

axiom contain_introduction:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		a, c |- b
	conclude:
		c |- a -> b

axiom vee_cancellation:
	require:
		define a of statement
		define b of statement
		define c of statement
		define d of set[statement]
		a, d |- c
		b, d |- c
	conclude:
		a vee b, d |- c

axiom vee_introduction_right:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a
	conclude:
		c |- a vee b

axiom vee_introduction_left:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a
	conclude:
		c |- b vee a

axiom wedge_cancellation_left:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a wedge b
	conclude:
		c |- a

axiom wedge_cancellation_right:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a wedge b
	conclude:
		c |- b

axiom wedge_introduction:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a
		c |- b
	conclude:
		c |- a wedge b

axiom contain_cancellation_left:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a <-> b
		c |- a
	conclude:
		c |- b

axiom contain_cancellation_right:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a <-> b
		c |- b
	conclude:
		c |- a

axiom contain_introduction:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		a, c |- b
		b, c |- a
	conclude:
		c |- a <-> b


THEOREM

theorem example26_12:
	require:
		define a of statement
		define b of statement
		define c of statement
	conclude:
		a -> b, b -> c |- a -> c
	proof:
		a -> b, b -> c, a |- a -> b -[belong] <1>
		a -> b, b -> c, a |- a -[belong] <2>
		a -> b, b -> c, a |- b -[theorem contain_cancellation: <1> <2>] <3>
		a -> b, b -> c, a |- b -> c -[belong] <4>
		a -> b, b -> c, a |- c -[theorem contain_cancellation: <4> <3>] <5>
		a -> b, b -> c |- a -> c -[theorem contain_introduction: <5>] <6>

theorem example26_14:
	require:
		define a of statement
	conclude:
		not (not a) |- a
	proof:
		not (not a), not a |- not a -[belong] <1>
		not (not a), not a |- not (not a) -[belong] <2>
		not (not a) |- a -[theorem not_cancellation: <1> <2>] <3>

theorem example26_15_2:
	require:
		define a of statement
		define b of statement
	conclude:
		a -> (not b) |- b -> (not a)
	proof:
		a -> (not b), b, a |- a -[belong] <1>
		a -> (not b), b, a |- a -> (not b) -[belong] <2>
		a -> (not b), b, a |- not b -[theorem contain_cancellation: <2> <1>] <3>
		a -> (not b), b, a |- b -[belong] <4>
		a -> (not b), b |- not a -[theorem not_introduction: <4> <3>] <5>
		a -> (not b) |- b -> (not a) -[theorem contain_introduction: <5>] <6>

theorem example26_18_2
	require:
		define a of statement
		define b of statement
	conclude:
		b vee a |- a vee b
	proof:
		a |- a -[belong] <1>
		a |- a vee b -[theorem vee_introduction_right: <1>] <2>
		b |- b -[belong] <3>
		b |- a vee b -[theorem vee_introduction_left: <3>] <4>
		b vee a |- a vee b -[theorem vee_cancellation: <4> <2>] <5>

theorem example26_17_2
	require:
		define a of statement
		define b of statement
	conclude:
		a wedge b |- b wedge a
	proof:
		a wedge b |- a wedge b -[belong] <1>
		a wedge b |- a -[theorem wedge_cancellation_left: <1>] <2>
		a wedge b |- b -[theorem wedge_cancellation_right: <1>] <3>
		a wedge b |- b wedge a -[theorem wedge_introduction: <3> <2>] <4>

theorem example26_19
	require:
		define a of statement
		define b of statement
	conclude:
		a <-> b |- (a -> b) wedge (b -> a)
	proof:
		a <-> b, a |- a -[belong] <1>
		a <-> b, a |- a <-> b -[belong] <2>
		a <-> b, a |- b -[theorem contain_cancellation_left: <2> <1>] <3>
		a <-> b |- a -> b -[theorem contain_introduction: <3>] <4>
		a <-> b, b |- b -[belong] <5>
		a <-> b, b |- a <-> b -[belong] <6>
		a <-> b, b |- a -[theorem contain_cancellation_right: <6> <5>] <7>
		a <-> b |- b -> a -[theorem contain_introduction: <7>] <8>
		a <-> b |- (a -> b) wedge (b -> a) -[theorem wedge_introduction: <4> <8>] <9>


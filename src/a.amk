

# asfas f


import logics.proposition  # asfsalkfjsakl

theorem notCancellation:
	require:
		define a of statement
		define b of statement   # asf asklfj askl 
		define c of set[statement]
		not a,c |- b
		not a,c |- not b
	conclude:
		c |- a

theorem belong:
	require:
		define a of statement
		define b of set[statement] 
	conclude:
		a,b|-a

theorem contain_cancellation:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		c |- a -> b
		c |- a
	conclude:
		c |- b

axiom contain_introduction:
	require:
		define a of statement
		define b of statement
		define c of set[statement]
		a, c |- b
	conclude:
		c |- a -> b

theorem secondProof:
	require:
		define a of statement
		define b of statement
	conclude:
		not a, a |- b	
	proof:
		not b, not b, not a, a|- a -[belong] <tt>
		not b, not b, not a, a|- not a -[belong] <bb>
		not b, not a, a |- b -[theorem notCancellation: <tt> <bb>] <r>
		not b, not a, a |- not b -[belong] <cc>
		not a, a |- b -[theorem notCancellation: <r> <cc>] <dd>

theorem thirdProof:
	require:
		define a of statement
		define b of statement
	conclude:
		a, b |- b
	proof:
		not a, a->b, a, b |- not a -[belong] <A>
		not a, a->b, a, b |- a -[belong] <B>
#		a->b, a, b |- a -[theorem notCancellation: <A><B>] <C>
		a->b, a, b |- a->b -[belong] <D>
		a->b, a, b |- b -[theorem contain_cancellation: <D><x>] <E>

theorem fourthProof:
	require:
		define a of statement
		define b of statement
	conclude:
		not a -> not b |- b -> a
	proof:
		not a, not a -> not b, b |- not a -[belong] <e1>
		not a, not a -> not b, b |- not a -> not b -[belong] <e2>
#		not a, not a -> not b, b |- not b -[theorem contain_cancellation: <x><e1>] <e3>
		not a, not a -> not b, b |- b -[belong] <e4>
		not a -> not b, b |- a -[theorem notCancellation: <x> <x>] <e5>
		not a -> not b |- b -> a -[contain_introduction]
